
/** 
 *  SIMPLE_STORE HUFF EXERCISE
 *
 *  One of the storage locations available to devs when writing smart contracts is Storage. Its persistent and expensive
 *  
 *  The task is to write within the `MAIN` macro below, 2 functions...
 *      - One named `store()` that takes one function argument and stores it in storage slot 0,
 *      - the second named `read()` that simply returns what is stored at storage slot 0.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function store(uint256) payable returns()
#define function read() payable returns(uint256)

#define constant STORAGE_SLOT = FREE_STORAGE_POINTER()

#define macro MAIN() = takes(0) returns(0) {
    returndatasize calldataload 0xe0 shr // [func selector]

    dup1 __FUNC_SIG(store) eq storeimp jumpi
    dup1 __FUNC_SIG(read) eq readimp jumpi

    returndatasize dup1 revert

    storeimp:
      STORE()

    readimp:
      READ()

    returndatasize dup1 revert
}

#define macro STORE() = takes(0) returns(0) {
    0x04 calldataload
    [STORAGE_SLOT] sstore
    returndatasize dup1 return
}

#define macro READ() = takes(0) returns(0) {
    [STORAGE_SLOT] sload
    returndatasize mstore
    0x20 returndatasize return
}