
/** 
 *  FOO_BAR HUFF EXERCISE
 *
 *  Majority of ethereum contracts hold logic divide this logic into functions which users can specify and call to execute a particular logic without clashing into the other
 *  
 *  The task is to write within the `MAIN` macro below, huff code that mimics 2 solidity functions. 
 *      - One named `foo()` that simply returns 2,
 *      - the second named `bar()` that simply returns 3.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function foo() payable returns(uint256)
 #define function bar() payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {
    returndatasize calldataload 0xe0 shr // [func selector]

    dup1 __FUNC_SIG(foo) eq fooimp jumpi
    dup1 __FUNC_SIG(bar) eq barimp jumpi

    returndatasize dup1 revert

    fooimp:
      FOO()

    barimp:
      BAR()

    returndatasize dup1 revert
}

#define macro FOO() = takes(0) returns(0) {
  0x02 returndatasize mstore
  0x20 returndatasize return
}

#define macro BAR() = takes(0) returns(0) {
  0x03 returndatasize mstore
  0x20 returndatasize return
}