
/** 
 *  MULTIPLY HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like multiplication etc
 *  
 *  The task is to write within the `MAIN` macro below, a function named `multiply` that takes in 2 uint256s, and returns their product. Be sure to revert on overflow
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function multiply(uint256, uint256) payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {
    returndatasize calldataload 0xe0 shr // [func selector]
    
    __FUNC_SIG(multiply) eq implementation jumpi // go to function body
    
    returndatasize dup1 revert // revert otherwise

    implementation:
      0x04 calldataload // [arg1]

      dup1 returndatasize eq zero jumpi // if arg1 is zero, return zero

      0x24 calldataload // [arg2, arg1]
      dup2 dup2 mul     // [mul, arg2, arg1]
      swap2 dup3        // [mul, arg1, arg2, mul]
      div eq ret jumpi  // [mul]

      returndatasize dup1 revert  // revert otherwise

      ret:
        returndatasize mstore
        0x20 returndatasize return

      zero:
        returndatasize dup1 mstore
        0x20 returndatasize return
}