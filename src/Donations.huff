/** 
 *  DONATIONS HUFF EXERCISE
 *  
 *  The task is to Implement solidity's "receive" functionality which allows sending ether to a smart contract without any calldata
 *  also have a getter function that returns how much an address has donated. Addresses can donate several times
 */

#define function donated(address) payable returns(uint256)

#define macro MAIN() = takes(0) returns(0) {
    
    returndatasize calldataload 0xe0 shr // [func selector]

    dup1 __FUNC_SIG(donated) eq donatedJump jumpi

    receiveJump jump

    donatedJump:
      DONATED()

    receiveJump:
      RECEIVE()

    returndatasize dup1 revert
}

#define macro GET_SLOT() = takes(1) returns(1) {
    // input:  [msg.sender]
    // output: [slot]
    returndatasize mstore
    0x20 returndatasize sha3
}

#define macro RECEIVE() = takes(0) returns(0) {
    caller        // [msg.sender]
    
    GET_SLOT()    // [slot]
    dup1          // [slot, slot]
    sload         // [old_donated, slot]
    callvalue     // [callvalue, old_donated, slot]
    add           // [updated_donated, slot]
    swap1         // [slot, updated_donated]
    sstore        // []

    returndatasize dup1 return
}

#define macro DONATED() = takes(0) returns(0) {
    0x04 calldataload  // [address]

    GET_SLOT()         // [slot]
    sload              // [donated]
    returndatasize mstore

    0x20 returndatasize return
}