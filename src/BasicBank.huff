/** 
 *  BASIC_BANK HUFF EXERCISE
 *  
 *  The task is to create a basic bank with huff
 * functionalities include
 *      - depositing tokens via similar to how solidity's `receive` function works
 *      - withdrawing tokens
 *      - keeping track of and viewing balance
 */

#define function balanceOf(address) payable returns(uint256)
#define function withdraw(uint256) payable returns()

#define macro MAIN() = takes(0) returns(0) {
    returndatasize calldataload 0xe0 shr // [func selector]

    dup1 __FUNC_SIG(balanceOf) eq balanceOfJump jumpi
    dup1 __FUNC_SIG(withdraw) eq withdrawJump jumpi

    returndatasize callvalue gt receiveJump jumpi

    returndatasize dup1 revert

    balanceOfJump:
      BALANCE_OF()

    withdrawJump: 
      WITHDRAW()

    receiveJump:
      RECEIVE()

    returndatasize dup1 revert
}

#define macro RECEIVE() = takes(0) returns(0) {
    caller GET_SLOT()      // [slot]
    dup1 sload             // [balance, slot]
    callvalue add          // [new_balance, slot]
    swap1 sstore           // []

    returndatasize dup1 return
}

#define macro GET_SLOT() = takes(1) returns(1) {
    // input:  [msg.sender]
    // output: [slot]
    returndatasize mstore
    0x20 returndatasize sha3
}

#define macro BALANCE_OF() = takes(0) returns(0) {
  0x04 calldataload           // [address]
  GET_SLOT()                  // [slot]
  sload                       // [balance]
  returndatasize mstore       // []

  0x20 returndatasize return  // []
}

#define macro WITHDRAW() = takes(0) returns(0) {
  0x04 calldataload           // [amount]
  caller GET_SLOT()           // [slot, amount]
  dup1 sload                  // [balance, slot, amount]

  dup1 dup4 gt error jumpi  
  dup3 swap1 sub              // [newBalance, slot, amount]
  swap1 sstore                // [amount]

  returndatasize              // [0x00, amount]
  dup1                        // [0x00, 0x00, amount]
  dup1                        // [0x00, 0x00, 0x00, amount]
  dup1                        // [0x00, 0x00, 0x00, 0x00, amount]
  swap4                       // [amount, 0x00, 0x00, 0x00, 0x00]
  caller                      // [caller, amount, 0x00, 0x00, 0x00, 0x00]
  gas                         // [gasleft, caller, amount, 0x00, 0x00, 0x00, 0x00]
  call                        // [success]

  returndatasize eq error jumpi // revert on error

  returndatasize dup1 return

  error:
    returndatasize dup1 revert
}